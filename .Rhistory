summary(train)
test<-read.csv("data/Test_data.csv")
train<-read.csv("data/Train_data.csv")
train
summary(train)
fromage <- read.table("fromage.txt",header=T,row.names=1)
fromage <- read.table("Dara/fromage.txt",header=T,row.names=1)
fromage <- read.table("Dara/fromage.txt",header=T,row.names=1)
fromage <- read.table("Dara/fromage.txt",header=T,row.names=1)
fromage <- read.table("Dara/fromage.txt",header=T,row.names=1)
fromage <- read.table("Dara/fromage.txt",header=T,row.names=1)
fromage <- read.table("fromage.txt",header=T,row.names=1)
head(fromage)
dim(fromage)
str(fromage)
summary(fromage)
pairs(fromage)
fromage.cr <- scale(fromage,center=TRUE, scale=TRUE)
d.fromage.cr <- dist(fromage.cr)
cah.ward <- hclust(d.fromage.cr, method="ward.D2")
plot(cah.ward, hang=-1)   #hang=-1 option pour aligner les labels. C'est juste esthÃ©tique !
cah.ward$height
barplot(cah.ward$height)
plot(cah.ward, hang =-1,main="ward.D2")
K=5
rect.hclust(cah.ward,K)
groupes.cah <- cutree(cah.ward, K)
groupes.cah
table(groupes.cah)
for (i in 1:K)
{ cat("groupe", i,"\n")
I=which(groupes.cah==i)
print(rownames(fromage)[I]) }
Means_groupes <- matrix(NA, nrow=K, ncol=dim(fromage)[2])
colnames(Means_groupes)=colnames(fromage)
rownames(Means_groupes) =1:K
for (i in 1:K) Means_groupes[i,]<- colMeans(fromage[groupes.cah==i,])
round(Means_groupes)
kmeans.result <- kmeans(fromage.cr,centers=K)
kmeans.result$size
kmeans.result$cluster
kmeans.result <- kmeans(fromage.cr,centers=K)
kmeans.result$size
init <- matrix(NA, nrow=K, ncol=dim(fromage)[2])
colnames(init)=colnames(fromage)
for (i in 1:K) init[i,] <- colMeans(fromage.cr[groupes.cah==i,])
init
kmeans.initCAH <- kmeans(fromage.cr, centers= init)
kmeans.result <- kmeans(fromage.cr,centers=K,nstart=1000)
test<-read.csv("data/Test_data.csv")
train<-read.csv("data/Train_data.csv")
train
summary(train)
library(MASS)
res=lda(class() ~., data=train)
library(MASS)
res=lda(class ~., data=train)
# Load the iris dataset
data(iris)
# Create a training and testing dataset
set.seed(123)
train_idx <- sample(nrow(iris), 0.7 * nrow(iris))
train_data <- iris[train_idx, ]
test_data <- iris[-train_idx, ]
# Fit a DFA model to predict the species based on the petal length and width variables
library(MASS)
model <- lda(Species ~ Petal.Length + Petal.Width, data = train_data)
# Predict the species of the test data using the model
pred <- predict(model, newdata = test_data)
# Evaluate the accuracy of the predictions
mean(pred$class == test_data$Species)
knitr::opts_chunk$set(echo = TRUE)
donnees=read.table("SAheart.data", sep=",", header=T, row.names=1)
plot(pressure)
donnees=read.table("SAheart.data", sep=",", header=T, row.names=1)
donnees=read.table("SAheart.data", sep=",", header=T, row.names=1)
donnees=read.table("SAheart.data", sep=",", header=T, row.names=1)
head(donnees)
str(donnees)
donnees$chd=as.factor(donnees$chd)
donnees$chd=as.factor(donnees$chd)
attach(donnees)
table(chd)
res <- glm(chd ~ ., family = binomial , data=donnees)
res <- glm(chd ~ ., family = binomial , data=donnees)
res <- glm(chd ~ ., family = binomial , data=donnees)
summary(res)
